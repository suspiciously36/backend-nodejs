-- CREATING DATABASE

CREATE DATABASE database_03_tuankietk4
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_United States.1252'
    LC_CTYPE = 'English_United States.1252'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;


-- CREATING TABLES

CREATE TABLE "customers" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(50) NOT NULL,
  "address" varchar(255) NOT NULL,
  "phone" varchar UNIQUE NOT NULL
);

CREATE TABLE "room" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "room_type" varchar(50) NOT NULL,
  "maximum_customer" int NOT NULL,
  "price" int NOT NULL,
  "description" text
);

CREATE TABLE "booking" (
  "booking_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "room_id" int NOT NULL,
  "customer_id" int NOT NULL,
  "booked_at" date NOT NULL,
  "start_time" time NOT NULL,
  "finish_time" time NOT NULL,
  "deposit" float NOT NULL,
  "note" text,
  "booking_status" varchar NOT NULL
);

CREATE TABLE "service_usage_detail" (
  "booking_id" int,
  "service_id" int,
  "quantity" int,
  PRIMARY KEY ("booking_id", "service_id")
);

CREATE TABLE "accompanied_service" (
  "service_id" int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "service_name" varchar(100) NOT NULL,
  "unit" varchar(50) NOT NULL,
  "price" float NOT NULL
);

ALTER TABLE "booking" ADD FOREIGN KEY ("room_id") REFERENCES "room" ("id");

ALTER TABLE "booking" ADD FOREIGN KEY ("customer_id") REFERENCES "customers" ("id");

ALTER TABLE "service_usage_detail" ADD FOREIGN KEY ("booking_id") REFERENCES "booking" ("booking_id");

ALTER TABLE "service_usage_detail" ADD FOREIGN KEY ("service_id") REFERENCES "accompanied_service" ("service_id");

-- INSERTING DATA

INSERT INTO room (room_type, maximum_customer, price)
VALUES  ('Type 1', 20, 60000),
		('Type 1', 25, 80000),
		('Type 2', 15, 50000),
		('Type 3', 20, 50000)
		
INSERT INTO customers (name, address, phone)
VALUES  ('Nguyen Van A', 'Hoa xuan', '1111111111'),
		('Nguyen Van B', 'Hoa hai', '1111111112'),
		('Phan Van A', 'Cam le', '1111111113'),
		('Phan Van B', 'Hoa xuan', '1111111114')
		
INSERT INTO accompanied_service (service_name, unit, price)
VALUES 	('Beer', 'lon', 10000),
		('Nuoc ngot', 'lon', 8000),
		('Trai cay', 'dia', 35000),
		('Khan uot', 'cai', 2000)

INSERT INTO booking (room_id, customer_id, booked_at, start_time, finish_time, deposit, note, booking_status)
VALUES  ('1', '2', '2018-03-26', '11:00', '13:30', 100000, null, 'Da dat'),
		('1', '3', '2018-03-27', '17:15', '19:15', 50000, null, 'Da huy'),
		('2', '2', '2018-03-26', '20:30', '22:15', 100000, null, 'Da dat'),
		('3', '1', '2018-04-01', '19:30', '21:15', 20000, null, 'Da dat')
		
INSERT INTO service_usage_detail (booking_id, service_id, quantity)
VALUES 	('1', '1', 20),
		('1', '3', 3),
		('1', '2', 10),
		('2', '2', 10),
		('2', '3', 1),
		('3', '3', 2),
		('3', '4', 10)
		
-- QUERYING

-- #1
SELECT b.booking_id, b.room_id, r.room_type, r.price, c.name AS customer_name, b.booked_at, 
ROUND(EXTRACT(epoch FROM r.price * (b.finish_time - b.start_time))/3600) AS sing_total_price,
(CASE WHEN sum(sud.quantity * acs.price) IS NULL THEN 0
	  ELSE sum(sud.quantity * acs.price) END)
 AS service_total_price,
(ROUND(EXTRACT(epoch FROM r.price * (b.finish_time - b.start_time))/3600) + 
(CASE WHEN sum(sud.quantity * acs.price) IS NULL THEN 0
	  ELSE sum(sud.quantity * acs.price) END)) AS total_price

FROM booking AS b

INNER JOIN room AS r
ON b.room_id = r.id
INNER JOIN customers as c
ON c.id = b.customer_id
LEFT JOIN service_usage_detail as sud
ON sud.booking_id = b.booking_id
LEFT JOIN accompanied_service as acs
ON acs.service_id = sud.service_id
GROUP BY b.booking_id, b.room_id, r.room_type, r.price, c.name, b.booked_at
ORDER BY b.booking_id ASC


-- #2
SELECT c.id, c.name, c.address, c.phone FROM customers as c
INNER JOIN booking as b
ON b.customer_id = c.id
GROUP BY c.id
HAVING LOWER(c.address) = LOWER('Hoa xuan')


-- #3
SELECT r.id, r.room_type, r.maximum_customer, r.price, count(b.room_id) AS number_of_bookings
FROM room as r
INNER JOIN booking as b
ON b.room_id = r.id
WHERE b.booking_status = 'Da dat'
GROUP BY r.id
HAVING count(b.room_id) > 2


